const path = require("path");

const {
    configure
} = adone.gyp;
// const requireInject = require("require-inject");
// const configure = requireInject("../lib/configure", {
//     "graceful-fs": {
//         closeSync(fd) {
//             return undefined;
//         },
//         openSync(path) {
//             if (readableFiles.some((f) => { return f === path })) {
//                 return 0;
//             }
//             let error = new Error("ENOENT - not found");
//             throw error;
//         }
//     }
// });

const dir = `${path.sep}testdir`;
const readableFile = "readable_file";
const anotherReadableFile = "another_readable_file";
const readableFileInDir = `somedir${path.sep}${readableFile}`;
const readableFiles = [
    path.resolve(dir, readableFile),
    path.resolve(dir, anotherReadableFile),
    path.resolve(dir, readableFileInDir)
];

it("find accessible - empty array", () => {
    const candidates = [];
    const found = configure.test.findAccessibleSync("test", dir, candidates);
    assert.strictEqual(found, undefined);
});

it("find accessible - single item array, readable", () => {
    const candidates = [readableFile];
    const found = configure.test.findAccessibleSync("test", dir, candidates);
    assert.strictEqual(found, path.resolve(dir, readableFile));
});

it("find accessible - single item array, readable in subdir", () => {
    const candidates = [readableFileInDir];
    const found = configure.test.findAccessibleSync("test", dir, candidates);
    assert.strictEqual(found, path.resolve(dir, readableFileInDir));
});

it("find accessible - single item array, unreadable", () => {
    const candidates = ["unreadable_file"];
    const found = configure.test.findAccessibleSync("test", dir, candidates);
    assert.strictEqual(found, undefined);
});


it("find accessible - multi item array, no matches", () => {
    const candidates = ["non_existent_file", "unreadable_file"];
    const found = configure.test.findAccessibleSync("test", dir, candidates);
    assert.strictEqual(found, undefined);
});


it("find accessible - multi item array, single match", () => {
    const candidates = ["non_existent_file", readableFile];
    const found = configure.test.findAccessibleSync("test", dir, candidates);
    assert.strictEqual(found, path.resolve(dir, readableFile));
});

it("find accessible - multi item array, return first match", () => {
    const candidates = ["non_existent_file", anotherReadableFile, readableFile];
    const found = configure.test.findAccessibleSync("test", dir, candidates);
    assert.strictEqual(found, path.resolve(dir, anotherReadableFile));
});
