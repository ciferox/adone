const PouchDB = adone.database.pouch.coverage.DB;
const generateErrorFromResponse = PouchDB.utils.generateErrorFromResponse;

//
// TODO: a lot of these errors are kind of misleading, or the error
// message gets stripped out during processing. We should fix that.
// However, these tests represent the state of the code circa 5.3.2, just
// so we can have a record of the expected behavior.
//

describe("test.errors.js", () => {

    // these were generated by the main test suite

    it("test generateErrorFromResponse() #1", () => {
        const response = { error: "not_found", reason: "missing" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, "missing");
    });

    it("test generateErrorFromResponse() #2", () => {
        const response = { error: "not_found", reason: "no_db_file" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, "no_db_file");
    });

    it("test generateErrorFromResponse() #3", () => {
        const response = {
            error: "query_parse_error",
            reason: "`keys` is incompatible with `key`, `start_key` and `end_key`"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "query_parse_error");
        assert.equal(err.message, "`keys` is incompatible with `key`, `start_key` and `end_key`");
    });

    it("test generateErrorFromResponse() #4", () => {
        const response = {
            error: "query_parse_error",
            reason: "`keys` must be an array of strings."
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "query_parse_error");
        assert.equal(err.message, "`keys` must be an array of strings.");
    });

    it("test generateErrorFromResponse() #5", () => {
        const response = { missing: "2-fake" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "unknown");
    });

    it("test generateErrorFromResponse() #6", () => {
        const response = {
            error: "missing_stub",
            reason: "id:bin_doc, name:bar.txt"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "missing_stub");
    });

    it("test generateErrorFromResponse() #7", () => {
        const response = {
            error: "missing_stub",
            reason: "id:stubby, name:foo.txt"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "missing_stub");
    });

    it("test generateErrorFromResponse() #8", () => {
        const response = {
            error: "bad_request",
            reason: "Only reserved document ids may start with underscore."
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "bad_request");
        assert.equal(err.message, "Only reserved document ids may start with " +
            "underscore.");
    });

    it("test generateErrorFromResponse() #9", () => {
        const response = { error: "conflict", reason: "Document update conflict." };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 409);
        assert.equal(err.name, "conflict");
        assert.equal(err.message, "Document update conflict.");
    });

    it("test generateErrorFromResponse() #10", () => {
        const response = { error: "bad_request", reason: "Invalid rev format" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "bad_request");
        assert.equal(err.message, "Invalid rev format");
    });

    it("test generateErrorFromResponse() #11", () => {
        const response = { error: "badarg", reason: "33" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "badarg");
        assert.equal(err.message, "33");
    });

    it("test generateErrorFromResponse() #12", () => {
        const response = {
            error: "bad_request",
            reason: "Referer header required."
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "bad_request");
        assert.equal(err.message, "Referer header required.");
    });

    it("test generateErrorFromResponse() #13", () => {
        const response = { status: 400 };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 400);
        assert.equal(err.name, "unknown");
    });

    it("test generateErrorFromResponse() #14", () => {
        const response = {
            id: "77c03c2755ae08600a0ff58aebc513fe",
            error: "conflict",
            reason: "Document update conflict."
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 409);
        assert.equal(err.name, "conflict");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "77c03c2755ae08600a0ff58aebc513fe");
    });

    it("test generateErrorFromResponse() #15", () => {
        const response = { error: "not_found", reason: "deleted" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() #16", () => {
        const response = {
            error: "doc_validation",
            reason: "Bad special document member: _zing"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "doc_validation");
        assert.equal(err.message, "Bad special document member: _zing");
    });

    it("test generateErrorFromResponse() #23", () => {
        const response = {
            error: "bad_request",
            reason: "Document id must be a string"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "bad_request");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() #26", () => {
        const response = {
            id: "doc1",
            rev: "1-x",
            error: "unauthorized",
            reason: "Document must have a foo."
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "unauthorized");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "doc1");
    });

    it("test generateErrorFromResponse() #27", () => {
        const response = {
            error: "file_exists",
            reason: "The database could not be created, the file already exists."
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "file_exists");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() #29", () => {
        const response = { error: "not_found", reason: "missing json key: odd" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() #30", () => {
        const response = {
            error: "not_found",
            reason: "missing json key: filters"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() #31", () => {
        const response = { error: "not_found", reason: "missing json key: views" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() #32", () => {
        const response = {
            error: "bad_request",
            reason: "`view` filter parameter is not provided."
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "bad_request");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() #33", () => {
        const response = {
            status: 404,
            name: "not_found",
            message: "missing",
            error: true,
            reason: "missing"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 404);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, "missing");
        assert.equal(err.error, true);
    });

    it("test generateErrorFromResponse() #77", () => {
        const response = { error: "unknown_error", reason: "function_clause" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "unknown_error");
    });

    it("test generateErrorFromResponse() #78", () => {
        const response = "<!doctype html><html>YO THIS IS AN ERROR</html>";
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
    });

    it("test generateErrorFromResponse() #81", () => {
        const response = {
            id: "0596A614-2001-05B6-93C3-6B3B6504CD05",
            rev: "1-8156ee4ba7898510bfaf868668a81e4f",
            error: "forbidden",
            reason: "Document must have a foo."
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "forbidden");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "0596A614-2001-05B6-93C3-6B3B6504CD05");
    });

    it("test generateErrorFromResponse() #87", () => {
        const response = {
            id: "45E4D1A4-B01D-6898-B8FF-035B2C76AB6B",
            rev: "1-a531a7aa3fb56bdae69f7ce4113486c4",
            error: "forbidden",
            reason: { foo: "is object" }
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "forbidden");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "45E4D1A4-B01D-6898-B8FF-035B2C76AB6B");
    });

    it("test generateErrorFromResponse() #88", () => {
        const response = {
            id: "5F99EF37-DABA-DACB-A58E-4C6D76511985",
            rev: "1-17702a69add79ff7d9006d43b9262ec2",
            error: "forbidden",
            reason: "Document foo is string"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "forbidden");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "5F99EF37-DABA-DACB-A58E-4C6D76511985");
    });

    it("test generateErrorFromResponse() #89", () => {
        const response = {
            id: "1A3F4028-2E5D-B12F-80BB-ED5234BF6E02",
            rev: "1-d89df54b4ec86054c05025137143b5e8",
            error: "unauthorized",
            reason: { foo: "is object" }
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "unauthorized");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "1A3F4028-2E5D-B12F-80BB-ED5234BF6E02");
    });

    it("test generateErrorFromResponse() #90", () => {
        const response = {
            id: "36824FB1-C1E6-76EE-BF7E-4D3614A36736",
            rev: "1-3b1c04d44d17dbfef815433693dc26d4",
            error: "unauthorized",
            reason: "Document foo is string"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "unauthorized");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "36824FB1-C1E6-76EE-BF7E-4D3614A36736");
    });

    it("test generateErrorFromResponse() #91", () => {
        const response = {
            id: "6DA30042-600E-2581-8BD8-8A92F79CE53E",
            rev: "1-6a36583f7500873176466ffc1e2c8b41",
            error: "unauthorized",
            reason: "go away, no picture"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "unauthorized");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "6DA30042-600E-2581-8BD8-8A92F79CE53E");
    });

    it("test generateErrorFromResponse() #93", () => {
        const response = {
            id: "foo1",
            rev: "1-ba250664825530e39299e870460f77d6",
            error: "unauthorized",
            reason: "go away, no picture"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "unauthorized");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "foo1");
    });

    it("test generateErrorFromResponse() #96", () => {
        const response = {
            id: "77c03c2755ae08600a0ff58aebcaef19",
            rev: "1-967a00dff5e02add41819138abb3284d",
            error: "forbidden",
            reason: "Document must have a foo."
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "forbidden");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "77c03c2755ae08600a0ff58aebcaef19");
    });

    it("test generateErrorFromResponse() #102", () => {
        const response = {
            id: "77c03c2755ae08600a0ff58aebcb650f",
            rev: "1-e13a955ef7781be762def6793e1e789d",
            error: "forbidden",
            reason: "Document foo is string"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "forbidden");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "77c03c2755ae08600a0ff58aebcb650f");
    });

    it("test generateErrorFromResponse() #103", () => {
        const response = {
            id: "77c03c2755ae08600a0ff58aebcb7be6",
            rev: "1-eb291f6f3b68b37993b33ed7e5c68ebc",
            error: "forbidden",
            reason: { foo: "is object" }
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "forbidden");
        assert.equal(err.message, response.reason);
        assert.equal(err.id, "77c03c2755ae08600a0ff58aebcb7be6");
    });

    // these were generated from the map/reduce test suite

    it("test generateErrorFromResponse() via map/reduce #1", () => {
        const response = { error: "not_found", reason: "missing" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, "missing");
    });

    it("test generateErrorFromResponse() via map/reduce #2", () => {
        const response = { error: "not_found", reason: "no_db_file" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() via map/reduce #3", () => {
        const response = {
            error: "invalid_value",
            reason: "builtin _sum function requires map values to be numbers or " +
            "lists of numbers"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "invalid_value");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() via map/reduce #4", () => {
        const response = {
            error: "query_parse_error",
            reason: "Invalid value for positive integer: \"-1\""
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "query_parse_error");
        assert.equal(err.message, "Invalid value for positive integer: \"-1\"");
    });

    it("test generateErrorFromResponse() via map/reduce #5", () => {
        const response = {
            error: "query_parse_error",
            reason: "Invalid value for integer: \"exact\""
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "query_parse_error");
        assert.equal(err.message, "Invalid value for integer: \"exact\"");
    });

    it("test generateErrorFromResponse() via map/reduce #6", () => {
        const response = {
            error: "query_parse_error",
            reason: "Invalid value for integer: \"1a\""
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "query_parse_error");
        assert.equal(err.message, "Invalid value for integer: \"1a\"");
    });

    it("test generateErrorFromResponse() via map/reduce #7", () => {
        const response = {
            error: "query_parse_error",
            reason: "No rows can match your key range, reverse your start_key " +
            "and end_key or set descending=true"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "query_parse_error");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() via map/reduce #8", () => {
        const response = {
            error: "query_parse_error",
            reason: "`include_docs` is invalid for reduce"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "query_parse_error");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() via map/reduce #9", () => {
        const response = {
            error: "query_parse_error",
            reason: "Multi-key fetchs for reduce views must use `group=true`"
        };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "query_parse_error");
        assert.equal(err.message, response.reason);
    });

    it("test generateErrorFromResponse() via map/reduce #10", () => {
        const response = { error: "not_found", reason: "missing_named_view" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, "missing_named_view");
    });

    it("test generateErrorFromResponse() via map/reduce #11", () => {
        const response = { error: "not_found", reason: "deleted" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "not_found");
        assert.equal(err.message, "deleted");
    });

    it("test generateErrorFromResponse() via map/reduce #12", () => {
        const response = { error: "unknown_error", reason: "function_clause" };
        const err = generateErrorFromResponse(response);
        assert.equal(err.status, 500);
        assert.equal(err.name, "unknown_error");
        assert.equal(err.message, "function_clause");
    });


});
