
import { parse } from "../lib/parser";
import { Printer } from "../lib/printer";
import types from "../lib/types";
const nodeMajorVersion = parseInt(process.versions.node, 10);
(nodeMajorVersion >= 6 ? describe : xdescribe)("JSX Compatability", () => {
    const printer = new Printer({ tabWidth: 2 });
    const parseOptions = {
        parser: require("../parsers/babel")
    };
    function check(source) {
        const ast1 = parse(source, parseOptions);
        const ast2 = parse(printer.printGenerically(ast1).code, parseOptions);
        types.astNodesAreEquivalent.assert(ast1, ast2);
    }
    it("should parse and print attribute comments", () => {
        check("<b /* comment */ />");
        check("<b /* multi\nline\ncomment */ />");
    });
    it("should parse and print child comments", () => {
        check("<b>{/* comment */}</b>");
        check("<b>{/* multi\nline\ncomment */}</b>");
    });
    it("should parse and print literal attributes", () => {
        check("<b className=\"hello\" />");
    });
    it("should parse and print expression attributes", () => {
        check("<b className={classes} />");
    });
    it("should parse and print chidren", () => {
        check("<label><input /></label>");
    });
    it("should parse and print literal chidren", () => {
        check("<b>hello world</b>");
    });
    it("should parse and print expression children", () => {
        check("<b>{this.props.user.name}</b>");
    });
    it("should parse and print namespaced elements", () => {
        check("<Foo.Bar />");
    });
    it("should parse and print fragments", () => {
        check([
            "<>",
            "  <td>Hello</td>",
            "  <td>world!</td>",
            "</>"
        ].join("\n"));
    });
});
