{"version":3,"sources":["index.js"],"names":["is","std","adone","asNamespace","exports","uv","process","binding","function","errname","TypeError","err","error","uvErrname","code","Error","errnameFallback","alias","hasAlias","opts","some","x","Boolean","stdio","map","join","string","stdio_","array","result","len","Math","max","length","i","value","undefined","commandCache","collection","LRU","maxAge","resolveCommand","command","noExtension","resolved","get","has","fs","whichSync","pathExt","path","delimiter","env","PATHEXT","e","set","hasEmptyArgumentBug","windows","nodeVer","version","substr","split","num","parseInt","escapeArgument","arg","quote","String","replace","escapeCommand","test","shebangCache","readShebang","fd","buffer","Buffer","allocUnsafe","openSync","readSync","closeSync","shebang","util","toString","skipShellRegExp","supportsShellOption","parseNonShell","parsed","needsShell","applyQuotes","file","args","unshift","comspec","options","windowsVerbatimArguments","parseShell","shellCommand","concat","shell","platform","parse","slice","original","pathKey","Object","keys","find","toUpperCase","assign","cwd","prev","pth","resolve","ret","push","dirname","execPath","TEN_MEGABYTES","handleArgs","cmd","extendEnv","__winShell","maxBuffer","stripEof","preferLocal","localDir","encoding","reject","cleanup","detached","basename","handleInput","spawned","input","nil","stream","pipe","stdin","end","handleOutput","val","text","handleShell","fn","getStream","as","catch","message","notFoundError","syscall","errno","verifyENOENT","status","hookChildProcess","cp","originalEmit","emit","name","arg1","call","apply","arguments","makeError","stdout","stderr","signal","joinedCmd","timedOut","output","failed","exec","child_process","spawn","Promise","removeExitHandler","runtime","app","subscribe","kill","timeoutId","cleanupTimeout","clearTimeout","timeout","setTimeout","killSignal","processDone","on","destroy","handlePromise","promise","finally","all","then","arr","null","killed","onfulfilled","onrejected","execStdout","execStderr","execSync","spawnSync","shellSync","exists","pid","getChildPids","headers","number","InvalidArgument","normalizeHeader","str","lines","childPids","parents","line","columns","trim","proc","h","shift","toLowerCase","includes","ppid","force","tree","plainObject","system","username","password","filter","numeral","children","pids","child","errors","arrify","AggregateException"],"mappings":"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","file":"index.js","sourcesContent":["const {\n    is,\n    std\n} = adone;\n\nadone.asNamespace(exports);\n\n// The Node team wants to deprecate `process.bind(...)`.\n//   https://github.com/nodejs/node/pull/2768\n//\n// However, we need the 'uv' binding for errname support.\n// This is a defensive wrapper around it so `execa` will not fail entirely if it stops working someday.\n//\n// If this ever stops working. See: https://github.com/sindresorhus/execa/issues/31#issuecomment-215939939 for another possible solution.\nlet uv;\n\ntry {\n    uv = process.binding(\"uv\");\n\n    if (!is.function(uv.errname)) {\n        throw new TypeError(\"uv.errname is not a function\");\n    }\n} catch (err) {\n    adone.error(\"execa/lib/errname: unable to establish process.binding('uv')\", err);\n    uv = null;\n}\n\nconst uvErrname = (uv, code) => {\n    if (uv) {\n        return uv.errname(code);\n    }\n\n    if (!(code < 0)) {\n        throw new Error(\"err >= 0\");\n    }\n\n    return `Unknown system error ${code}`;\n};\n\nexport const errname = (code) => uvErrname(uv, code);\n// Used for testing the fallback behavior\nexport const errnameFallback = uvErrname;\n\nconst alias = [\"stdin\", \"stdout\", \"stderr\"];\n\nconst hasAlias = (opts) => alias.some((x) => Boolean(opts[x]));\n\nexport const stdio = (opts) => {\n    if (!opts) {\n        return null;\n    }\n\n    if (opts.stdio && hasAlias(opts)) {\n        throw new Error(`It's not possible to provide \\`stdio\\` in combination with one of ${alias.map((x) => `\\`${x}\\``).join(\", \")}`);\n    }\n\n    if (is.string(opts.stdio)) {\n        return opts.stdio;\n    }\n\n    const stdio_ = opts.stdio || [];\n\n    if (!is.array(stdio_)) {\n        throw new TypeError(`Expected \\`stdio\\` to be of type \\`string\\` or \\`Array\\`, got \\`${typeof stdio_}\\``);\n    }\n\n    const result = [];\n    const len = Math.max(stdio_.length, alias.length);\n\n    for (let i = 0; i < len; i++) {\n        let value = null;\n\n        if (!is.undefined(stdio_[i])) {\n            value = stdio_[i];\n        } else if (!is.undefined(opts[alias[i]])) {\n            value = opts[alias[i]];\n        }\n\n        result[i] = value;\n    }\n\n    return result;\n};\n\nconst commandCache = new adone.collection.LRU({ max: 50, maxAge: 30 * 1000 }); // Cache just for 30sec\n\nconst resolveCommand = (command, noExtension) => {\n    let resolved;\n\n    noExtension = Boolean(noExtension);\n    resolved = commandCache.get(`${command}!${noExtension}`);\n\n    // Check if its resolved in the cache\n    if (commandCache.has(command)) {\n        return commandCache.get(command);\n    }\n\n    try {\n        resolved = !noExtension ? adone.fs.whichSync(command) : adone.fs.whichSync(command, { pathExt: std.path.delimiter + (process.env.PATHEXT || \"\") });\n    } catch (e) { /* empty */ }\n\n    commandCache.set(`${command}!${noExtension}`, resolved);\n\n    return resolved;\n};\n\n// See: https://github.com/IndigoUnited/node-cross-spawn/pull/34#issuecomment-221623455\nconst hasEmptyArgumentBug = () => {\n    if (!is.windows) {\n        return false;\n    }\n\n    const nodeVer = process.version.substr(1).split(\".\").map((num) => {\n        return parseInt(num, 10);\n    });\n\n    return (nodeVer[0] === 0 && nodeVer[1] < 12);\n};\n\nconst escapeArgument = (arg, quote) => {\n    // Convert to string\n    arg = String(arg);\n\n    // If we are not going to quote the argument,\n    // escape shell metacharacters, including double and single quotes:\n    if (!quote) {\n        arg = arg.replace(/([()%!^<>&|;,\"'\\s])/g, \"^$1\");\n    } else {\n        // Sequence of backslashes followed by a double quote:\n        // double up all the backslashes and escape the double quote\n        arg = arg.replace(/(\\\\*)\"/g, '$1$1\\\\\"');\n\n        // Sequence of backslashes followed by the end of the string\n        // (which will become a double quote later):\n        // double up all the backslashes\n        arg = arg.replace(/(\\\\*)$/, \"$1$1\");\n\n        // All other backslashes occur literally\n\n        // Quote the whole thing:\n        arg = `\"${arg}\"`;\n    }\n\n    return arg;\n};\n\nconst escapeCommand = (command) => {\n    // Do not escape if this command is not dangerous..\n    // We do this so that commands like \"echo\" or \"ifconfig\" work\n    // Quoting them, will make them unaccessible\n    return /^[a-z0-9_-]+$/i.test(command) ? command : escapeArgument(command, true);\n};\n\n\n\nconst shebangCache = new adone.collection.LRU({ max: 50, maxAge: 30 * 1000 }); // Cache just for 30sec\n\nconst readShebang = (command) => {\n    let fd;\n\n    // Check if it is in the cache first\n    if (shebangCache.has(command)) {\n        return shebangCache.get(command);\n    }\n\n    // Read the first 150 bytes from the file\n    const buffer = Buffer.allocUnsafe(150);\n\n    try {\n        fd = std.fs.openSync(command, \"r\");\n        std.fs.readSync(fd, buffer, 0, 150, 0);\n        std.fs.closeSync(fd);\n    } catch (e) { /* empty */ }\n\n    // Attempt to extract shebang (null is returned if not a shebang)\n    const shebang = adone.util.shebang.command(buffer.toString());\n\n    // Store the shebang in the cache\n    shebangCache.set(command, shebang);\n\n    return shebang;\n};\n\nconst skipShellRegExp = /\\.(?:com|exe)$/i;\n\n// Supported in Node >= 6 and >= 4.8\nconst supportsShellOption = parseInt(process.version.substr(1).split(\".\")[0], 10) >= 6 ||\n    parseInt(process.version.substr(1).split(\".\")[0], 10) === 4 && parseInt(process.version.substr(1).split(\".\")[1], 10) >= 8;\n\nconst parseNonShell = (parsed) => {\n    let needsShell;\n    let applyQuotes;\n\n    if (!is.windows) {\n        return parsed;\n    }\n\n    // Detect & add support for shebangs\n    parsed.file = resolveCommand(parsed.command);\n    parsed.file = parsed.file || resolveCommand(parsed.command, true);\n    const shebang = parsed.file && readShebang(parsed.file);\n\n    if (shebang) {\n        parsed.args.unshift(parsed.file);\n        parsed.command = shebang;\n        needsShell = hasEmptyArgumentBug || !skipShellRegExp.test(resolveCommand(shebang) || resolveCommand(shebang, true));\n    } else {\n        needsShell = hasEmptyArgumentBug || !skipShellRegExp.test(parsed.file);\n    }\n\n    // If a shell is required, use cmd.exe and take care of escaping everything correctly\n    if (needsShell) {\n        // Escape command & arguments\n        applyQuotes = (parsed.command !== \"echo\"); // Do not quote arguments for the special \"echo\" command\n        parsed.command = escapeCommand(parsed.command);\n        parsed.args = parsed.args.map((arg) => {\n            return escapeArgument(arg, applyQuotes);\n        });\n\n        // Make use of cmd.exe\n        parsed.args = [\"/d\", \"/s\", \"/c\", `\"${parsed.command}${parsed.args.length ? ` ${parsed.args.join(\" \")}` : \"\"}\"`];\n        parsed.command = process.env.comspec || \"cmd.exe\";\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n\n    return parsed;\n};\n\nconst parseShell = (parsed) => {\n    // If node supports the shell option, there's no need to mimic its behavior\n    if (supportsShellOption) {\n        return parsed;\n    }\n\n    // Mimic node shell option, see: https://github.com/nodejs/node/blob/b9f6a2dc059a1062776133f3d4fd848c4da7d150/lib/child_process.js#L335\n    const shellCommand = [parsed.command].concat(parsed.args).join(\" \");\n\n    if (is.windows) {\n        parsed.command = is.string(parsed.options.shell) ? parsed.options.shell : process.env.comspec || \"cmd.exe\";\n        parsed.args = [\"/d\", \"/s\", \"/c\", `\"${shellCommand}\"`];\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    } else {\n        if (is.string(parsed.options.shell)) {\n            parsed.command = parsed.options.shell;\n        } else if (process.platform === \"android\") {\n            parsed.command = \"/system/bin/sh\";\n        } else {\n            parsed.command = \"/bin/sh\";\n        }\n\n        parsed.args = [\"-c\", shellCommand];\n    }\n\n    return parsed;\n};\n\nconst parse = (command, args, options) => {\n    // Normalize arguments, similar to nodejs\n    if (args && !is.array(args)) {\n        options = args;\n        args = null;\n    }\n\n    args = args ? args.slice(0) : []; // Clone array to avoid changing the original\n    options = options || {};\n\n    // Build our parsed object\n    const parsed = {\n        command,\n        args,\n        options,\n        file: undefined,\n        original: command\n    };\n\n    // Delegate further parsing to shell or non-shell\n    return options.shell ? parseShell(parsed) : parseNonShell(parsed);\n};\n\n\nconst pathKey = (opts) => {\n    opts = opts || {};\n\n    const env = opts.env || process.env;\n    const platform = opts.platform || process.platform;\n\n    if (platform !== \"win32\") {\n        return \"PATH\";\n    }\n\n    return Object.keys(env).find((x) => x.toUpperCase() === \"PATH\") || \"Path\";\n};\n\nconst env = (opts) => {\n    opts = Object.assign({\n        env: process.env\n    }, opts);\n\n    const env = Object.assign({}, opts.env);\n    const path = pathKey({ env });\n    opts = Object.assign({\n        cwd: process.cwd(),\n        path: env[path]\n    }, opts);\n\n    let prev;\n    let pth = std.path.resolve(opts.cwd);\n    const ret = [];\n\n    while (prev !== pth) {\n        ret.push(std.path.join(pth, \"node_modules/.bin\"));\n        prev = pth;\n        pth = std.path.resolve(pth, \"..\");\n    }\n\n    // ensure the running `node` binary is used\n    ret.push(std.path.dirname(process.execPath));\n\n\n    env[path] = ret.concat(opts.path).join(std.path.delimiter);\n\n    return env;\n};\n\n\nconst TEN_MEGABYTES = 1000 * 1000 * 10;\n\nconst handleArgs = (cmd, args, opts) => {\n    let parsed;\n\n    opts = Object.assign({\n        extendEnv: true,\n        env: {}\n    }, opts);\n\n    if (opts.extendEnv) {\n        opts.env = Object.assign({}, process.env, opts.env);\n    }\n\n    if (opts.__winShell === true) {\n        delete opts.__winShell;\n        parsed = {\n            command: cmd,\n            args,\n            options: opts,\n            file: cmd,\n            original: cmd\n        };\n    } else {\n        parsed = parse(cmd, args, opts);\n    }\n\n    opts = Object.assign({\n        maxBuffer: TEN_MEGABYTES,\n        stripEof: true,\n        preferLocal: true,\n        localDir: parsed.options.cwd || process.cwd(),\n        encoding: \"utf8\",\n        reject: true,\n        cleanup: true\n    }, parsed.options);\n\n    opts.stdio = stdio(opts);\n\n    if (opts.preferLocal) {\n        opts.env = env(Object.assign({}, opts, { cwd: opts.localDir }));\n    }\n\n    if (opts.detached) {\n        // #115\n        opts.cleanup = false;\n    }\n\n    if (is.windows && std.path.basename(parsed.command) === \"cmd.exe\") {\n        // #116\n        parsed.args.unshift(\"/q\");\n    }\n\n    return {\n        cmd: parsed.command,\n        args: parsed.args,\n        opts,\n        parsed\n    };\n};\n\nconst handleInput = (spawned, opts) => {\n    const input = opts.input;\n\n    if (is.nil(input)) {\n        return;\n    }\n\n    if (is.stream(input)) {\n        input.pipe(spawned.stdin);\n    } else {\n        spawned.stdin.end(input);\n    }\n};\n\nconst handleOutput = (opts, val) => {\n    if (val && opts.stripEof) {\n        val = adone.text.stripEof(val);\n    }\n\n    return val;\n};\n\nconst handleShell = (fn, cmd, opts) => {\n    let file = \"/bin/sh\";\n    let args = [\"-c\", cmd];\n\n    opts = Object.assign({}, opts);\n\n    if (is.windows) {\n        opts.__winShell = true;\n        file = process.env.comspec || \"cmd.exe\";\n        args = [\"/s\", \"/c\", `\"${cmd}\"`];\n        opts.windowsVerbatimArguments = true;\n    }\n\n    if (opts.shell) {\n        file = opts.shell;\n        delete opts.shell;\n    }\n\n    return fn(file, args, opts);\n};\n\nconst getStream = (process, stream, encoding, maxBuffer) => {\n    if (!process[stream]) {\n        return null;\n    }\n\n    let ret;\n\n    if (encoding) {\n        ret = adone.stream.as.string(process[stream], {\n            encoding,\n            maxBuffer\n        });\n    } else {\n        ret = adone.stream.as.buffer(process[stream], { maxBuffer });\n    }\n\n    return ret.catch((err) => {\n        err.stream = stream;\n        err.message = `${stream} ${err.message}`;\n        throw err;\n    });\n};\n\nconst notFoundError = (command, syscall) => {\n    const err = new Error(`${syscall} ${command} ENOENT`);\n    err.code = err.errno = \"ENOENT\";\n    err.syscall = `${syscall} ${command}`;\n\n    return err;\n};\n\nconst verifyENOENT = (status, parsed) => {\n    if (is.windows && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, \"spawn\");\n    }\n\n    return null;\n};\n\nconst hookChildProcess = (cp, parsed) => {\n    if (!is.windows) {\n        return;\n    }\n\n    const originalEmit = cp.emit;\n    cp.emit = function (name, arg1) {\n        let err;\n\n        // If emitting \"exit\" event and exit code is 1, we need to check if\n        // the command exists and emit an \"error\" instead\n        // See: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n        if (name === \"exit\") {\n            err = verifyENOENT(arg1, parsed, \"spawn\");\n\n            if (err) {\n                return originalEmit.call(cp, \"error\", err);\n            }\n        }\n\n        return originalEmit.apply(cp, arguments);\n    };\n};\n\nconst makeError = (result, options) => {\n    const stdout = result.stdout;\n    const stderr = result.stderr;\n\n    let err = result.error;\n    const code = result.code;\n    const signal = result.signal;\n\n    const parsed = options.parsed;\n    const joinedCmd = options.joinedCmd;\n    const timedOut = options.timedOut || false;\n\n    if (!err) {\n        let output = \"\";\n\n        if (is.array(parsed.opts.stdio)) {\n            if (parsed.opts.stdio[2] !== \"inherit\") {\n                output += output.length > 0 ? stderr : `\\n${stderr}`;\n            }\n\n            if (parsed.opts.stdio[1] !== \"inherit\") {\n                output += `\\n${stdout}`;\n            }\n        } else if (parsed.opts.stdio !== \"inherit\") {\n            output = `\\n${stderr}${stdout}`;\n        }\n\n        err = new Error(`Command failed: ${joinedCmd}${output}`);\n        err.code = code < 0 ? errname(code) : code;\n    }\n\n    err.stdout = stdout;\n    err.stderr = stderr;\n    err.failed = true;\n    err.signal = signal || null;\n    err.cmd = joinedCmd;\n    err.timedOut = timedOut;\n\n    return err;\n};\n\nexport const exec = (cmd, args, opts) => {\n    let joinedCmd = cmd;\n\n    if (is.array(args) && args.length > 0) {\n        joinedCmd += ` ${args.join(\" \")}`;\n    }\n\n    const parsed = handleArgs(cmd, args, opts);\n    const encoding = parsed.opts.encoding;\n    const maxBuffer = parsed.opts.maxBuffer;\n\n    let spawned;\n    try {\n        spawned = std.child_process.spawn(parsed.cmd, parsed.args, parsed.opts);\n    } catch (err) {\n        return Promise.reject(err);\n    }\n\n    let removeExitHandler;\n    if (parsed.opts.cleanup && adone.runtime.app) {\n        removeExitHandler = adone.runtime.app.subscribe(\"exit\", () => {\n            spawned.kill();\n        });\n    }\n\n    let timeoutId = null;\n    let timedOut = false;\n\n    const cleanupTimeout = () => {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n            timeoutId = null;\n        }\n    };\n\n    if (parsed.opts.timeout > 0) {\n        timeoutId = setTimeout(() => {\n            timeoutId = null;\n            timedOut = true;\n            spawned.kill(parsed.opts.killSignal);\n        }, parsed.opts.timeout);\n    }\n\n    const processDone = new Promise((resolve) => {\n        spawned.on(\"exit\", (code, signal) => {\n            cleanupTimeout();\n            resolve({ code, signal });\n        });\n\n        spawned.on(\"error\", (err) => {\n            cleanupTimeout();\n            resolve({ error: err });\n        });\n\n        if (spawned.stdin) {\n            spawned.stdin.on(\"error\", (err) => {\n                cleanupTimeout();\n                resolve({ error: err });\n            });\n        }\n    });\n\n    const destroy = () => {\n        if (spawned.stdout) {\n            spawned.stdout.destroy();\n        }\n\n        if (spawned.stderr) {\n            spawned.stderr.destroy();\n        }\n    };\n\n    const handlePromise = () => adone.promise.finally(Promise.all([\n        processDone,\n        getStream(spawned, \"stdout\", encoding, maxBuffer),\n        getStream(spawned, \"stderr\", encoding, maxBuffer)\n    ]).then((arr) => {\n        const result = arr[0];\n        result.stdout = arr[1];\n        result.stderr = arr[2];\n\n        if (removeExitHandler) {\n            removeExitHandler();\n        }\n\n        if (result.error || result.code !== 0 || !is.null(result.signal)) {\n            const err = makeError(result, {\n                joinedCmd,\n                parsed,\n                timedOut\n            });\n\n            // TODO: missing some timeout logic for killed\n            // https://github.com/nodejs/node/blob/master/lib/child_process.js#L203\n            // err.killed = spawned.killed || killed;\n            err.killed = err.killed || spawned.killed;\n\n            if (!parsed.opts.reject) {\n                return err;\n            }\n\n            throw err;\n        }\n\n        return {\n            stdout: handleOutput(parsed.opts, result.stdout),\n            stderr: handleOutput(parsed.opts, result.stderr),\n            code: 0,\n            failed: false,\n            killed: false,\n            signal: null,\n            cmd: joinedCmd,\n            timedOut: false\n        };\n    }), destroy);\n\n    hookChildProcess(spawned, parsed.parsed);\n\n    handleInput(spawned, parsed.opts);\n\n    spawned.then = (onfulfilled, onrejected) => handlePromise().then(onfulfilled, onrejected);\n    spawned.catch = (onrejected) => handlePromise().catch(onrejected);\n\n    return spawned;\n};\n\nexport const execStdout = (...args) => {\n    // TODO: set `stderr: 'ignore'` when that option is implemented\n    return exec.apply(null, args).then((x) => x.stdout);\n};\n\nexport const execStderr = (...args) => {\n    // TODO: set `stdout: 'ignore'` when that option is implemented\n    return exec.apply(null, args).then((x) => x.stderr);\n};\n\nexport const shell = (cmd, opts) => handleShell(exec, cmd, opts);\n\nexport const execSync = (cmd, args, opts) => {\n    const parsed = handleArgs(cmd, args, opts);\n\n    if (is.stream(parsed.opts.input)) {\n        throw new TypeError(\"The `input` option cannot be a stream in sync mode\");\n    }\n\n    const result = std.child_process.spawnSync(parsed.cmd, parsed.args, parsed.opts);\n\n    if (result.error || result.status !== 0) {\n        throw (result.error || new Error(result.stderr === \"\" ? result.stdout : result.stderr));\n    }\n\n    result.stdout = handleOutput(parsed.opts, result.stdout);\n    result.stderr = handleOutput(parsed.opts, result.stderr);\n\n    return result;\n};\n\nexport const shellSync = (cmd, opts) => handleShell(execSync, cmd, opts);\n\nexport const exists = (pid) => {\n    try {\n        return process.kill(pid, 0);\n    } catch (e) {\n        return e.code === \"EPERM\";\n    }\n};\n\nexport const getChildPids = async (pid) => {\n    let headers = null;\n\n    if (is.number(pid)) {\n        pid = pid.toString();\n    }\n\n    if (!is.string(pid)) {\n        throw new adone.x.InvalidArgument(`Invalid process identifier: ${pid}`);\n    }\n\n    //\n    // The `ps-tree` module behaves differently on *nix vs. Windows\n    // by spawning different programs and parsing their output.\n    //\n    // Linux:\n    // 1. \" <defunct> \" need to be striped\n    // ```bash\n    // $ ps -A -o comm,ppid,pid,stat\n    // COMMAND          PPID   PID STAT\n    // bbsd             2899 16958 Ss\n    // watch <defunct>  1914 16964 Z\n    // ps              20688 16965 R+\n    // ```\n    //\n    // Win32:\n    // 1. wmic PROCESS WHERE ParentProcessId=4604 GET Name,ParentProcessId,ProcessId,Status)\n    // 2. The order of head columns is fixed\n    // ```shell\n    // > wmic PROCESS GET Name,ProcessId,ParentProcessId,Status\n    // Name                          ParentProcessId  ProcessId   Status\n    // System Idle Process           0                0\n    // System                        0                4\n    // smss.exe                      4                228\n    // ```\n\n    const normalizeHeader = (str) => {\n        if (!is.windows) {\n            return str;\n        }\n\n        switch (str) {\n            case \"Name\":\n                return \"command\";\n            case \"ParentProcessId\":\n                return \"ppid\";\n            case \"ProcessId\":\n                return \"pid\";\n            case \"Status\":\n                return \"stat\";\n            default:\n                throw new Error(`Unknown process listing header: ${str}`);\n        }\n    };\n\n    let stdout;\n    if (is.windows) {\n        // See also: https://github.com/nodejs/node-v0.x-archive/issues/2318\n        stdout = await execStdout(\"wmic.exe\", [\"PROCESS\", \"GET\", \"Name,ProcessId,ParentProcessId,Status\"], {\n            __winShell: true\n        });\n    } else {\n        stdout = await execStdout(\"ps\", [\"-A\", \"-o\", \"ppid,pid,stat,comm\"]);\n    }\n\n    const lines = stdout.split(/\\r?\\n/);\n    const childPids = [];\n    const parents = [pid];\n\n    for (const line of lines) {\n        const columns = line.trim().split(/\\s+/);\n        if (!headers) {\n            headers = columns;\n\n            // Rename Win32 header name, to as same as the linux, for compatible.\n            headers = headers.map(normalizeHeader);\n            continue;\n        }\n\n        const proc = {};\n        const h = headers.slice();\n        while (h.length) {\n            proc[h.shift().toLowerCase()] = h.length ? columns.shift() : columns.join(\" \");\n        }\n\n        if (parents.includes(proc.ppid)) {\n            parents.push(proc.pid);\n            childPids.push(proc);\n        }\n    }\n\n    return childPids;\n};\n\nexport const kill = (input, { force = false, tree = true, windows } = {}) => {\n    const fn = is.windows ? (input) => {\n        const args = [];\n\n        if (is.plainObject(windows)) {\n            if (windows.system && windows.username && windows.password) {\n                args.push(\"/s\", windows.system, \"/u\", windows.username, \"/p\", windows.password);\n            }\n\n            if (windows.filter) {\n                args.push(\"/fi\", windows.filter);\n            }\n        }\n\n        if (force) {\n            args.push(\"/f\");\n        }\n\n        if (tree) {\n            args.push(\"/t\");\n        }\n\n        args.push(is.numeral(input) ? \"/pid\" : \"/im\", input);\n\n        return exec(\"taskkill\", args);\n    } : (input) => {\n        const cmd = is.numeral(input) ? \"kill\" : \"killall\";\n\n        if (tree && is.numeral(input)) {\n            return getChildPids(input).then((children) => {\n                const pids = children.map((child) => child.pid);\n                pids.push(input);\n                if (force) {\n                    pids.unshift(\"-9\");\n                }\n                return exec(cmd, pids);\n            });\n        }\n\n        if (force) {\n            return exec(cmd, [\"-9\", input]);\n        }\n        return exec(cmd, [input]);\n    };\n    const errors = [];\n\n    // Don't kill ourselves\n    input = adone.util.arrify(input).filter((x) => x !== process.pid);\n\n    return Promise.all(input.map((val) => {\n        return fn(val).catch((err) => {\n            errors.push(`Killing process ${val} failed: ${err.message.replace(/.*\\n/, \"\").replace(/kill: \\d+: /, \"\").trim()}`);\n        });\n    })).then(() => {\n        if (errors.length > 0) {\n            throw new adone.x.AggregateException(errors);\n        }\n    });\n};\n"],"sourceRoot":""}