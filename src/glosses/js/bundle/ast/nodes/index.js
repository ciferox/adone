adone.lazify({
    ArrayExpression: "./ArrayExpression",
    ArrayPattern: "./ArrayPattern",
    ArrowFunctionExpression: "./ArrowFunctionExpression",
    AssignmentExpression: "./AssignmentExpression",
    AssignmentPattern: "./AssignmentPattern",
    AwaitExpression: "./AwaitExpression",
    BinaryExpression: "./BinaryExpression",
    BlockStatement: "./BlockStatement",
    BreakStatement: "./BreakStatement",
    CallExpression: "./CallExpression",
    CatchClause: "./CatchClause",
    ClassBody: "./ClassBody",
    ClassDeclaration: "./ClassDeclaration",
    ClassExpression: "./ClassExpression",
    ConditionalExpression: "./ConditionalExpression",
    DoWhileStatement: "./DoWhileStatement",
    EmptyStatement: "./EmptyStatement",
    ExportAllDeclaration: "./ExportAllDeclaration",
    ExportDefaultDeclaration: "./ExportDefaultDeclaration",
    ExportNamedDeclaration: "./ExportNamedDeclaration",
    ExpressionStatement: "./ExpressionStatement",
    ForStatement: "./ForStatement",
    ForInStatement: "./ForInStatement",
    ForOfStatement: "./ForOfStatement",
    FunctionDeclaration: "./FunctionDeclaration",
    FunctionExpression: "./FunctionExpression",
    Identifier: "./Identifier",
    IfStatement: "./IfStatement",
    Import: "./Import",
    ImportDeclaration: "./ImportDeclaration",
    LabeledStatement: "./LabeledStatement",
    Literal: "./Literal",
    LogicalExpression: "./LogicalExpression",
    MemberExpression: "./MemberExpression",
    MethodDefinition: "./MethodDefinition",
    NewExpression: "./NewExpression",
    ObjectExpression: "./ObjectExpression",
    ObjectPattern: "./ObjectPattern",
    Program: "./Program",
    Property: "./Property",
    RestElement: "./RestElement",
    ReturnStatement: "./ReturnStatement",
    SequenceExpression: "./SequenceExpression",
    SwitchCase: "./SwitchCase",
    SwitchStatement: "./SwitchStatement",
    TaggedTemplateExpression: "./TaggedTemplateExpression",
    TemplateElement: "./TemplateElement",
    TemplateLiteral: "./TemplateLiteral",
    ThisExpression: "./ThisExpression",
    ThrowStatement: "./ThrowStatement",
    TryStatement: ["./shared/Node", (mod) => mod.StatementBase],
    UnaryExpression: "./UnaryExpression",
    UpdateExpression: "./UpdateExpression",
    VariableDeclarator: "./VariableDeclarator",
    VariableDeclaration: "./VariableDeclaration",
    WhileStatement: "./WhileStatement",
    YieldExpression: "./YieldExpression",
    UnknownNode: "./UnknownNode"
}, exports, require);
